jpsVersion: 1.3
jpsType: install
application:
  id: shopozor-ci
  name: Shopozor Continuous Integration
  version: 0.0
  baseUrl: https://raw.githubusercontent.com/shopozor/ci/master

  # if a local private registry is necessary, then add to the current manifest the manifest code from here: https://github.com/HidoraSwiss/manifest-registry/blob/master/manifest.jps

  settings:
    fields:
      - type: spacer
        caption: softozor.ch credentials
      - name: softozorUsername
        caption: Username
        type: string
        required: true
      - name: softozorPassword
        caption: Password
        type: string
        inputType: password
        required: true
      - type: spacer
        caption: Github credentials
      - name: githubUsername
        caption: Full permissions user
        type: string
        required: true
      - name: githubPassword
        caption: Password
        type: string
        inputType: password
        required: true
      - name: ghprbSecret
        caption: GHPRB Secret 
        type: string
        required: true
      - type: spacer 
        caption: Docker credentials
      - name: dockerUsername
        caption: User
        type: string
        required: true
      - name: dockerPassword
        caption: Password
        type: string
        inputType: password
        required: true
      - type: spacer
        caption: Jelastic credentials
      - name: jelasticUrl
        caption: Hoster URL
        type: string
        required: true
      - name: jelasticAppId
        caption: AppId
        type: string
        required: true
      - name: jelasticUsername
        caption: User
        type: string
        required: true
      - name: jelasticPassword
        caption: Password
        type: string
        inputType: password
        required: true
      - type: spacer
        caption: E2e Backend JPS
      - name: backendJpsBaseUrl
        caption: Base Url
        type: string
        required: true
        default: https://raw.githubusercontent.com/shopozor/backend/dev/e2e/
      - type: spacer
        caption: User accounts
      - name: username1
        caption: Username 1
        type: string
        required: true
        default: zadigus 

  globals:
    JENKINS_PLUGINS_FILENAME: listOfJenkinsPlugins.txt
    CREDENTIAL_FILENAME: credential.xml
    SECRET_CREDENTIAL_FILENAME: secret.xml
    GITHUB_CREDENTIAL_FILENAME: github-credentials.xml
    SOFTOZOR_CREDENTIAL_FILENAME: softozor-credentials.xml
    DOCKER_CREDENTIAL_FILENAME: docker-credentials.xml
    JELASTIC_USER_CREDENTIAL_FILENAME: jelastic-credentials.xml
    JELASTIC_APP_CREDENTIAL_FILENAME: jelastic-app-credentials.xml
    POSTGRES_CREDENTIAL_FILENAME: postgres-credentials.xml
    CONSUMER_BACKEND_CREDENTIAL_FILENAME: consumer-backend-name-credentials.xml
    MGMT_BACKEND_CREDENTIAL_FILENAME: management-backend-name-credentials.xml
    CONSUMER_FRONTEND_CREDENTIAL_FILENAME: consumer-frontend-name-credentials.xml
    MGMT_FRONTEND_CREDENTIAL_FILENAME: management-frontend-name-credentials.xml
    CREDENTIAL_SCRIPT: CreateCredential.sh
    USER_ACCOUNT_CREATION_SCRIPT: CreateUserAccount.sh
    GITHUB_CREDENTIALS_ID: github-credentials
    SOFTOZOR_CREDENTIALS_ID: softozor-credentials
    DOCKER_CREDENTIALS_ID: docker-credentials
    JELASTIC_USER_CREDENTIALS_ID: jelastic-credentials
    JELASTIC_APP_CREDENTIALS_ID: jelastic-app-credentials
    POSTGRES_CREDENTIALS_ID: postgres-credentials
    CONSUMER_BACKEND_CREDENTIALS_ID: consumer-backend-name-credentials
    MGMT_BACKEND_CREDENTIALS_ID: management-backend-name-credentials
    CONSUMER_FRONTEND_CREDENTIALS_ID: consumer-frontend-name-credentials
    MGMT_FRONTEND_CREDENTIALS_ID: management-frontend-name-credentials
    PG_USER_PASSWORD: ${fn.password(10)}
    PG_DB_USERNAME: saleor
    PG_DB_NAME: saleor
    PG_PASSWORD: ${fn.password(10)}
    PG_DATABASE_URL: postgres://${globals.PG_DB_USERNAME}:${globals.PG_USER_PASSWORD}@${nodes.sqldb.intIP}:5432/${globals.PG_DB_NAME}
    GHPRBTRIGGER_PLUGIN_CONFIG: org.jenkinsci.plugins.ghprb.GhprbTrigger.xml
    GLOBAL_LIBRARIES_PLUGIN_CONFIG: org.jenkinsci.plugins.workflow.libs.GlobalLibraries.xml
    USER_PASSWORD1: ${fn.password(10)}
    consumerBackendEnvName: shopozor-consumer-backend-e2e
    consumerFrontendEnvName: shopozor-consumer-frontend-e2e
    mgmtBackendEnvName: shopozor-mgmt-backend-e2e
    mgmtFrontendEnvName: shopozor-mgmt-frontend-e2e

  env:
    topology:
        nodes:
#          - nodeGroup: bl 
#            nodeType: nginx-dockerized
#            tag: 1.14.2
#            displayName: Node balancing
#            count: 1
#            fixedCloudlets: 1
#            cloudlets: 4
#            env:
#              DOCKER_EXPOSED_PORT: 22,80,443
          - image: jenkins/jenkins:lts
            count: 1
            cloudlets: 32
            nodeGroup: cp
          - nodeGroup: sqldb
            nodeType: postgresql
            tag: 11.2
            displayName: PostgreSQL
            fixedCloudlets: 1
            cloudlets: 4

  onInstall:
    - installDocker
    - installPlugins
    - installAptPackages
    - createUserAccounts
    - setupCredentials
    - installPostgresqlDB
    - setupJobs
    - setupJobViews
    #- setupSSL
    - sendEmailWithPasswords
    
  actions:
    installDocker:
      - cmd [cp]:
        - curl -fsSL ${baseUrl}/scripts/InstallDocker.sh | /bin/bash
    installPlugins:
      - cmd [cp]:
          - cd /tmp
          - wget --quiet ${baseUrl}/config/plugins/${globals.JENKINS_PLUGINS_FILENAME}
          - curl -fsSL ${baseUrl}/scripts/InstallPlugins.sh | /bin/bash -s ${globals.JENKINS_PLUGINS_FILENAME}
      - upload:
          - nodeGroup: cp
            sourcePath: ${baseUrl}/config/plugins/${globals.GHPRBTRIGGER_PLUGIN_CONFIG}
            destPath: /var/jenkins_home/${globals.GHPRBTRIGGER_PLUGIN_CONFIG}
          - nodeGroup: cp
            sourcePath: ${baseUrl}/config/plugins/${globals.GLOBAL_LIBRARIES_PLUGIN_CONFIG}
            destPath: /var/jenkins_home/${globals.GLOBAL_LIBRARIES_PLUGIN_CONFIG}
      - api:
          - method: environment.file.ReplaceInBody
            params: 
              path: /var/jenkins_home/${globals.GHPRBTRIGGER_PLUGIN_CONFIG}
              pattern: GITHUB_CREDENTIAL_ID
              replacement: ${globals.GITHUB_CREDENTIALS_ID}
              nodeGroup: cp
          - method: environment.file.ReplaceInBody
            params: 
              path: /var/jenkins_home/${globals.GHPRBTRIGGER_PLUGIN_CONFIG}
              pattern: GHPRB_SHARED_SECRET
              replacement: ${settings.ghprbSecret}
              nodeGroup: cp
          - method: environment.file.ReplaceInBody
            params: 
              path: /var/jenkins_home/${globals.GLOBAL_LIBRARIES_PLUGIN_CONFIG}
              pattern: GITHUB_CREDENTIAL_ID
              replacement: ${globals.GITHUB_CREDENTIALS_ID}
              nodeGroup: cp
      - restart
    installAptPackages:
      - installTools
      - installSaleorDependencies
    installTools:
      - cmd [cp]:
        - apt install jq dos2unix
      - installYarn
      - installPickles
    installYarn:
      cmd [cp]:
        - curl -sL https://deb.nodesource.com/setup_10.x | bash -
        - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        - echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
        - apt update 
        - apt install -y yarn nodejs
    installPickles:
      - cmd [cp]:
        - apt install -y mono-runtime mono-complete
        - wget https://github.com/picklesdoc/pickles/releases/download/v2.20.1/Pickles-exe-2.20.1.zip
        - unzip Pickles-exe-2.20.1.zip -d /opt/pickles
    installSaleorDependencies:
      cmd [cp]:
        - apt install -y build-essential python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info
    fillPasswordCredentials:
      - api:
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: GLOBAL_OR_SYSTEM
              replacement: ${this.globalOrSystem}
              nodeGroup: ${this.nodeGroup}
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: CREDENTIAL_ID
              replacement: ${this.credentialID}
              nodeGroup: ${this.nodeGroup}
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: USERNAME
              replacement: ${this.username}
              nodeGroup: ${this.nodeGroup}
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: PASSWORD
              replacement: ${this.password}
              nodeGroup: ${this.nodeGroup}
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: DESCRIPTION
              replacement: ${this.description}
              nodeGroup: ${this.nodeGroup}
    fillSecretCredentials:
      - api:
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: GLOBAL_OR_SYSTEM
              replacement: ${this.globalOrSystem}
              nodeGroup: ${this.nodeGroup}
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: CREDENTIAL_ID
              replacement: ${this.credentialID}
              nodeGroup: ${this.nodeGroup}
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: SECRET
              replacement: ${this.secret}
              nodeGroup: ${this.nodeGroup}
          - method: environment.file.ReplaceInBody
            params: 
              path: ${this.filename}
              pattern: DESCRIPTION
              replacement: ${this.description}
              nodeGroup: ${this.nodeGroup}
    setupCredentials:
      - cmd [cp]:
          - cd /tmp
          - wget --quiet ${baseUrl}/config/${globals.CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.GITHUB_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.SOFTOZOR_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.DOCKER_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.JELASTIC_USER_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.JELASTIC_APP_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.CONSUMER_BACKEND_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.MGMT_BACKEND_CREDENTIAL_FILENAME}
          - wget --quiet ${baseUrl}/config/${globals.SECRET_CREDENTIAL_FILENAME}
          - cp ${globals.SECRET_CREDENTIAL_FILENAME} ${globals.POSTGRES_CREDENTIAL_FILENAME}
          - cp ${globals.SECRET_CREDENTIAL_FILENAME} ${globals.CONSUMER_FRONTEND_CREDENTIAL_FILENAME}
          - cp ${globals.SECRET_CREDENTIAL_FILENAME} ${globals.MGMT_FRONTEND_CREDENTIAL_FILENAME}
      - fillPasswordCredentials:
          filename: /tmp/${globals.GITHUB_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.GITHUB_CREDENTIALS_ID}
          username: ${settings.githubUsername}
          password: ${settings.githubPassword}
          description: Github credentials
          nodeGroup: cp
      - fillPasswordCredentials:
          filename: /tmp/${globals.SOFTOZOR_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.SOFTOZOR_CREDENTIALS_ID}
          username: ${settings.softozorUsername}
          password: ${settings.softozorPassword}
          description: Softozor.ch credentials
          nodeGroup: cp
      - fillPasswordCredentials:
          filename: /tmp/${globals.DOCKER_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.DOCKER_CREDENTIALS_ID}
          username: ${settings.dockerUsername}
          password: ${settings.dockerPassword}
          description: Docker hub credentials
          nodeGroup: cp
      - fillPasswordCredentials:
          filename: /tmp/${globals.JELASTIC_USER_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.JELASTIC_USER_CREDENTIALS_ID}
          username: ${settings.jelasticUsername}
          password: ${settings.jelasticPassword}
          description: Jelastic user credentials
          nodeGroup: cp
      - fillPasswordCredentials:
          filename: /tmp/${globals.JELASTIC_APP_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.JELASTIC_APP_CREDENTIALS_ID}
          username: ${settings.jelasticUrl}
          password: ${settings.jelasticAppId}
          description: Jelastic app credentials (hoster url and app id)
          nodeGroup: cp
      - fillPasswordCredentials:
          filename: /tmp/${globals.CONSUMER_BACKEND_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.CONSUMER_BACKEND_CREDENTIALS_ID}
          username: ${globals.consumerBackendEnvName}
          password: ${settings.backendJpsBaseUrl}
          description: Name and base raw jps url of the consumer backend environment (it is intended to be completed with /manifest.jps)
          nodeGroup: cp
      - fillPasswordCredentials:
          filename: /tmp/${globals.MGMT_BACKEND_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.MGMT_BACKEND_CREDENTIALS_ID}
          username: ${globals.mgmtBackendEnvName}
          password: ${settings.backendJpsBaseUrl}
          description: Name and base raw jps url of the management backend environment (it is intended to be completed with /manifest.jps)
          nodeGroup: cp
      - fillSecretCredentials:
          filename: /tmp/${globals.POSTGRES_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.POSTGRES_CREDENTIALS_ID}
          secret: ${globals.PG_DATABASE_URL}
          description: Postgres URL
          nodeGroup: cp
      - fillSecretCredentials:
          filename: /tmp/${globals.CONSUMER_FRONTEND_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.CONSUMER_FRONTEND_CREDENTIALS_ID}
          secret: ${globals.consumerFrontendEnvName}
          description: Name of the consumer frontend environment
          nodeGroup: cp
      - fillSecretCredentials:
          filename: /tmp/${globals.MGMT_FRONTEND_CREDENTIAL_FILENAME}
          globalOrSystem: GLOBAL
          credentialID: ${globals.MGMT_FRONTEND_CREDENTIALS_ID}
          secret: ${globals.mgmtFrontendEnvName}
          description: Name of the management frontend environment
          nodeGroup: cp
      - cmd [cp]:
          - wget --quiet ${baseUrl}/scripts/${globals.CREDENTIAL_SCRIPT} -O /tmp/${globals.CREDENTIAL_SCRIPT}
          - chmod u+x /tmp/${globals.CREDENTIAL_SCRIPT}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.GITHUB_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.SOFTOZOR_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.DOCKER_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.JELASTIC_USER_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.JELASTIC_APP_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.POSTGRES_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.CONSUMER_BACKEND_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.MGMT_BACKEND_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.CONSUMER_FRONTEND_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.MGMT_FRONTEND_CREDENTIAL_FILENAME}
      - restart
    createUserAccounts:
      - createUserAccount:
          username: ${settings.username1}
          password: ${globals.USER_PASSWORD1}
    createUserAccount:
      - cmd [cp]:
        - cd /tmp
        - wget --quiet ${baseUrl}/scripts/${globals.USER_ACCOUNT_CREATION_SCRIPT} -O /tmp/${globals.USER_ACCOUNT_CREATION_SCRIPT}
        - chmod u+x /tmp/${globals.USER_ACCOUNT_CREATION_SCRIPT}
        - /tmp/${globals.USER_ACCOUNT_CREATION_SCRIPT} "${this.username}" "${this.password}" "admin" "$(cat /var/jenkins_home/secrets/initialAdminPassword)"
    installPostgresqlDB:
      - cmd[sqldb]:
          - jem passwd set -p ${globals.PG_PASSWORD}
          - export PGPASSWORD='${globals.PG_PASSWORD}'
          - psql -U webadmin -d postgres -c "CREATE ROLE ${globals.PG_DB_USERNAME} PASSWORD '${globals.PG_USER_PASSWORD}' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;"
          - psql -U webadmin -d postgres -c "CREATE DATABASE ${globals.PG_DB_NAME} OWNER ${globals.PG_DB_USERNAME} ENCODING 'utf-8' TEMPLATE template0;"
        user: root
    setupJobs:
      # It was necessary to put the job setup in a separate jps.
      # Putting the code written in the job-setup.jps here directly 
      # always fails for an unknown reason.
      - install:
          jps: ${baseUrl}/config/job-setup.jps
          envName: ${env.envName}
          settings:
            username: admin 
            password: doYouReallyBelieveThisIsTheAdminPassword?
    setupJobViews:
      - cmd [cp]:
        - mv /var/jenkins_home/config.xml /var/jenkins_home/config.xml.bak
      - upload:
        - nodeGroup: cp
          sourcePath: ${baseUrl}/config/main-config.xml
          destPath: /var/jenkins_home/config.xml
    #setupSSL:
    #  - install:
    #      jps: https://github.com/jelastic-jps/lets-encrypt/blob/master/manifest.jps
    #      nodeGroup: bl
    #      envName: ${env.envName}
    sendEmailWithPasswords:
      return:
        result: success
        email: |
          # PostgreSQL
          **PostgreSQL URL**: postgres://${globals.PG_DB_USERNAME}:${globals.PG_USER_PASSWORD}@${nodes.sqldb.intIP}:5432/${globals.PG_DB_NAME}
          # PgAdmin
          **webadmin**: ${globals.PG_PASSWORD}
          # User accounts
          * **${settings.username1}**: ${globals.USER_PASSWORD1}
    restart:  
      - restartContainers:
        - nodeGroup: cp
success: |
  **Your environment Jenkins has been installed successfully.**
