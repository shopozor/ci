jpsVersion: 1.3
jpsType: install
application:
  id: shopozor-ci
  name: Shopozor Continuous Integration
  version: 0.0
  baseUrl: https://raw.githubusercontent.com/softozor/shopozor-ci/master

  settings:
    fields:
      - type: spacer
        caption: Github credentials
      - name: githubUsername
        caption: User
        type: string
        required: true
      - name: githubPassword
        caption: Password
        type: string
        inputType: password
        required: true
      - type: spacer
        caption: Bitbucket credentials
      - name: bitbucketUsername
        caption: User
        type: string
        required: true
      - name: bitbucketPassword
        caption: Password
        type: string
        inputType: password
        required: true
      - type: spacer
        caption: Jelastic credentials
      - name: jelasticUrl
        caption: Hoster URL
        type: string
        required: true
      - name: jelasticAppId
        caption: AppId
        type: string
        required: true
      - name: jelasticUsername
        caption: User
        type: string
        required: true
      - name: jelasticPassword
        caption: Password
        type: string
        inputType: password
        required: true
      - type: spacer
        caption: Env names
      - name: backendEnvName
        caption: Backend name
        type: string
        required: true
      - name: backendJps
        caption: Backend JPS
        type: string
        required: true
      - name: consumerFrontendEnvName
        caption: Consumer frontend name
        type: string
        required: true
      - name: consumerFrontendJps
        caption: Consumer frontend JPS
        type: string
        required: true
      - name: mgmtFrontendEnvName
        caption: Mgmt frontend name
        type: string
        required: true
      - name: mgmtFrontendJps
        caption: Mgmt frontend JPS
        type: string
        required: true
        
  env:
    topology:
      nodes:
        - image: jenkins/jenkins:lts
          count: 1
          cloudlets: 16
          nodeGroup: cp
        - nodeGroup: sqldb
          nodeType: postgresql
          tag: 11.2
          displayName: PostgreSQL
          fixedCloudlets: 1
          cloudlets: 4

  globals:
    JENKINS_PLUGINS_FILENAME: listOfJenkinsPlugins.txt
    CREDENTIAL_FILENAME: credential.xml
    SECRET_CREDENTIAL_FILENAME: secret.xml
    GITHUB_CREDENTIAL_FILENAME: github-credentials.xml
    BITBUCKET_CREDENTIAL_FILENAME: bitbucket-credentials.xml
    JELASTIC_USER_CREDENTIAL_FILENAME: jelastic-credentials.xml
    JELASTIC_APP_CREDENTIAL_FILENAME: jelastic-app-credentials.xml
    POSTGRES_CREDENTIAL_FILENAME: postgres-credentials.xml
    BACKEND_CREDENTIAL_FILENAME: backend-name-credentials.xml
    CONSUMER_FRONTEND_CREDENTIAL_FILENAME: consumer-frontend-name-credentials.xml
    MGMT_FRONTEND_CREDENTIAL_FILENAME: mgmt-frontend-name-credentials.xml
    CREDENTIAL_SCRIPT: CreateCredential.sh
    JOB_CREATION_SCRIPT: CreateJob.sh
    GITHUB_CREDENTIALS_ID: github-credentials
    BITBUCKET_CREDENTIALS_ID: bitbucket-credentials
    JELASTIC_USER_CREDENTIALS_ID: jelastic-credentials
    JELASTIC_APP_CREDENTIALS_ID: jelastic-app-credentials
    POSTGRES_CREDENTIALS_ID: postgres-credentials
    BACKEND_CREDENTIALS_ID: backend-name-credentials
    CONSUMER_FRONTEND_CREDENTIALS_ID: consumer-frontend-name-credentials
    MGMT_FRONTEND_CREDENTIALS_ID: mgmt-frontend-name-credentials
    PG_USER_PASSWORD: ${fn.password(10)}
    PG_DB_USERNAME: saleor
    PG_DB_NAME: saleor
    PG_PASSWORD: ${fn.password(10)}
    PG_DATABASE_URL: postgres://${globals.PG_DB_USERNAME}:${globals.PG_USER_PASSWORD}@${nodes.sqldb.intIP}:5432/${globals.PG_DB_NAME}

  onInstall:
    - installDocker
    - installPlugins
    - setupCredentials
    - installPostgresqlDB
    - setupJobs
    - sendEmailWithPasswords
    
  actions:
    installDocker:
      cmd [cp]:
        - curl -fsSL ${baseUrl}/scripts/InstallDocker.sh | /bin/bash
    installPlugins:
      - cmd [cp]:
          - cd /tmp
          - wget --quiet ${baseUrl}/config/plugins/${globals.JENKINS_PLUGINS_FILENAME}
          - curl -fsSL ${baseUrl}/scripts/InstallPlugins.sh | /bin/bash -s ${globals.JENKINS_PLUGINS_FILENAME}
      - upload:
          - nodeGroup: cp
            sourcePath: ${baseUrl}/config/plugins/org.jenkinsci.plugins.ghprb.GhprbTrigger.xml
            destPath: /var/jenkins_home/org.jenkinsci.plugins.ghprb.GhprbTrigger.xml
      - replaceInFile:
          nodeType: docker
          path: /var/jenkins_home/org.jenkinsci.plugins.ghprb.GhprbTrigger.xml
          replacements:
            - pattern: GITHUB_CREDENTIALS
              replacement: ${globals.GITHUB_CREDENTIALS_ID}
      - restart
    setupCredentials:
      - cmd [cp]:
          - cd /tmp
          - wget --quiet ${baseUrl}/config/${globals.CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.GITHUB_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.BITBUCKET_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.JELASTIC_USER_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.JELASTIC_APP_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.BACKEND_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.CONSUMER_FRONTEND_CREDENTIAL_FILENAME}
          - cp ${globals.CREDENTIAL_FILENAME} ${globals.MGMT_FRONTEND_CREDENTIAL_FILENAME}
          - wget --quiet ${baseUrl}/config/${globals.SECRET_CREDENTIAL_FILENAME}
          - cp ${globals.SECRET_CREDENTIAL_FILENAME} ${globals.POSTGRES_CREDENTIAL_FILENAME}
      - replaceInFile:
          nodeType: docker
          path: /tmp/${globals.GITHUB_CREDENTIAL_FILENAME}
          replacements:
            - pattern: GLOBAL_OR_SYSTEM
              replacement: GLOBAL
            - pattern: CREDENTIAL_ID
              replacement: ${globals.GITHUB_CREDENTIALS_ID}
            - pattern: USERNAME
              replacement: ${settings.githubUsername}
            - pattern: PASSWORD
              replacement: ${settings.githubPassword}
            - pattern: DESCRIPTION
              replacement: Github credentials
      - replaceInFile:
          nodeType: docker
          path: /tmp/${globals.BITBUCKET_CREDENTIAL_FILENAME}
          replacements:
            - pattern: GLOBAL_OR_SYSTEM
              replacement: GLOBAL
            - pattern: CREDENTIAL_ID
              replacement: ${globals.BITBUCKET_CREDENTIALS_ID}
            - pattern: USERNAME
              replacement: ${settings.bitbucketUsername}
            - pattern: PASSWORD
              replacement: ${settings.bitbucketPassword}
            - pattern: DESCRIPTION
              replacement: Bitbucket credentials
      - replaceInFile:
          nodeType: docker
          path: /tmp/${globals.JELASTIC_USER_CREDENTIAL_FILENAME}
          replacements:
            - pattern: GLOBAL_OR_SYSTEM
              replacement: GLOBAL
            - pattern: CREDENTIAL_ID
              replacement: ${globals.JELASTIC_USER_CREDENTIALS_ID}
            - pattern: USERNAME
              replacement: ${settings.jelasticUsername}
            - pattern: PASSWORD
              replacement: ${settings.jelasticPassword}
            - pattern: DESCRIPTION
              replacement: Jelastic user credentials
      - replaceInFile:
          nodeType: docker
          path: /tmp/${globals.JELASTIC_APP_CREDENTIAL_FILENAME}
          replacements:
            - pattern: GLOBAL_OR_SYSTEM
              replacement: GLOBAL
            - pattern: CREDENTIAL_ID
              replacement: ${globals.JELASTIC_APP_CREDENTIALS_ID}
            - pattern: USERNAME
              replacement: ${settings.jelasticUrl}
            - pattern: PASSWORD
              replacement: ${settings.jelasticAppId}
            - pattern: DESCRIPTION
              replacement: Jelastic app credentials (hoster url and app id)
      - replaceInFile:
          nodeType: docker
          path: /tmp/${globals.POSTGRES_CREDENTIAL_FILENAME}
          replacements:
            - pattern: GLOBAL_OR_SYSTEM
              replacement: GLOBAL
            - pattern: CREDENTIAL_ID
              replacement: ${globals.POSTGRES_CREDENTIALS_ID}
            - pattern: SECRET
              replacement: ${globals.PG_DATABASE_URL}
            - pattern: DESCRIPTION
              replacement: Postgres URL
      - replaceInFile:
          nodeType: docker
          path: /tmp/${globals.BACKEND_CREDENTIAL_FILENAME}
          replacements:
            - pattern: GLOBAL_OR_SYSTEM
              replacement: GLOBAL
            - pattern: CREDENTIAL_ID
              replacement: ${globals.BACKEND_CREDENTIALS_ID}
            - pattern: USERNAME
              replacement: ${settings.backendEnvName}
            - pattern: PASSWORD
              replacement: ${settings.backendJps}
            - pattern: DESCRIPTION
              replacement: Name of the backend environment
      - replaceInFile:
          nodeType: docker
          path: /tmp/${globals.CONSUMER_FRONTEND_CREDENTIAL_FILENAME}
          replacements:
            - pattern: GLOBAL_OR_SYSTEM
              replacement: GLOBAL
            - pattern: CREDENTIAL_ID
              replacement: ${globals.CONSUMER_FRONTEND_CREDENTIALS_ID}
            - pattern: USERNAME
              replacement: ${settings.consumerFrontendEnvName}
            - pattern: PASSWORD
              replacement: ${settings.consumerFrontendJps}
            - pattern: DESCRIPTION
              replacement: Name of the consumer frontend environment
      - replaceInFile:
          nodeType: docker
          path: /tmp/${globals.MGMT_FRONTEND_CREDENTIAL_FILENAME}
          replacements:
            - pattern: GLOBAL_OR_SYSTEM
              replacement: GLOBAL
            - pattern: CREDENTIAL_ID
              replacement: ${globals.MGMT_FRONTEND_CREDENTIALS_ID}
            - pattern: USERNAME
              replacement: ${settings.mgmtFrontendEnvName}
            - pattern: PASSWORD
              replacement: ${settings.mgmtFrontendJps}
            - pattern: DESCRIPTION
              replacement: Name of the management frontend environment
      - cmd [cp]:
          - wget --quiet ${baseUrl}/scripts/${globals.CREDENTIAL_SCRIPT} -O /tmp/${globals.CREDENTIAL_SCRIPT}
          - chmod u+x /tmp/${globals.CREDENTIAL_SCRIPT}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.GITHUB_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.BITBUCKET_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.JELASTIC_USER_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.JELASTIC_APP_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.POSTGRES_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.BACKEND_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.CONSUMER_FRONTEND_CREDENTIAL_FILENAME}
          - /tmp/${globals.CREDENTIAL_SCRIPT} /tmp/${globals.MGMT_FRONTEND_CREDENTIAL_FILENAME}
      - restart
    installPostgresqlDB:
      - cmd[sqldb]:
          - jem passwd set -p ${globals.PG_PASSWORD}
          - export PGPASSWORD='${globals.PG_PASSWORD}'
          - psql -U webadmin -d postgres -c "CREATE ROLE ${globals.PG_DB_USERNAME} PASSWORD '${globals.PG_USER_PASSWORD}' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;"
          - psql -U webadmin -d postgres -c "CREATE DATABASE ${globals.PG_DB_NAME} OWNER ${globals.PG_DB_USERNAME} ENCODING 'utf-8' TEMPLATE template0;"
        user: root
    setupJobs:
      # It was necessary to put the job setup in a separate jps.
      # Putting the code written in the job-setup.jps here directly 
      # always fails for an unknown reason.
      - install:
          jps: ${baseUrl}/config/job-setup.jps
          envName: ${env.envName}
          settings:
            username: admin 
            password: doYouReallyBelieveThisIsTheAdminPassword?
    sendEmailWithPasswords:
      return:
        result: success
        email: |
          # PostgreSQL
          **PostgreSQL URL**: postgres://${globals.PG_DB_USERNAME}:${globals.PG_USER_PASSWORD}@${nodes.sqldb.intIP}:5432/${globals.PG_DB_NAME}
          # PgAdmin
          **webadmin**: ${globals.PG_PASSWORD}
    restart:  
      - restartContainers:
        - nodeGroup: cp
success: |
  **Your environment Jenkins has been installed successfully.**
